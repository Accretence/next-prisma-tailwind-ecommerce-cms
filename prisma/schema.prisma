generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}

model User {
  id                String  @id @default(uuid())
  credit            Float   @default(0)
  email             String  @unique
  name              String?
  referralCode      String @unique @default(uuid())

  isAdmin           Boolean @default(false)
  isBanned          Boolean @default(false)
  isEmailSubscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments           Payment[]
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId       String

  referralsProvided String[]   
  referralsConsumed String[]     
  blogPosts         BlogPost[]
  documentPages     DocumentPage[]
}

model Payment {
  id   String @id

  payableAmount   Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id])
  userId       String
}

model Product {
  id   String @id
  name String
  description String
  image String

  price   Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}

model Subscription {
  id   String @id

  payableAmount   Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expireAt  DateTime  

  user         User[]
  userId       String
}

model BlogPost {
  slug        String  @id
  title       String
  image       String
  description String
  content     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories String[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model DocumentPage {
  slug          String  @id
  title         String
  content       String? @db.Text
  index         Int
  category      String
  categoryIndex Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}
