generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}

model User {
  id                String  @id @default(cuid())
  credit            Float   @default(0)
  email             String @unique
  picture           String?
  name              String?
  referralCode      String? @unique
  OTP               String?
  isMFA             Boolean @default(false)
  isAdmin           Boolean @default(false)
  isBanned          Boolean @default(false)
  isEmailSubscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments          Payment[]
  referralsProvided Payment[]       @relation("referralsProvided")
  referralsConsumed Payment[]       @relation("referralsConsumed")
  blogPosts         BlogPost[]
  documentPages     DocumentPage[]
  messages          Message[]
}

model Message {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  fromUser Boolean
    createdAt DateTime @default(now())


  content String
}

model Payment {
  transactionId String @id

  payableAmount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  referralProvider   User   @relation("referralsProvided", fields: [referralProviderId], references: [id])
  referralProviderId String

  referralConsumer   User   @relation("referralsConsumed", fields: [referralConsumerId], references: [id])
  referralConsumerId String
}

model BlogPost {
  slug        String  @id
  title       String
  image       String
  description String
  content     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories String[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model DocumentPage {
  slug          String  @id
  title         String
  content       String? @db.Text
  index         Int
  category      String
  categoryIndex Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}